version: "3.8"

services:
  config-service:
    build:
      context: ./config-service
    container_name: config-service
    ports:
      - "8088:8088"
    environment:
      SPRING_APPLICATION_NAME: config-service
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: "classpath:/application/"
      EUREKA_CLIENT_ENABLED: false
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-service:
    build:
      context: ./discovery-service
    container_name: discovery-service
    depends_on:
      config-service:
        condition: service_healthy
    ports:
      - "9099:9099"
    environment:
      SPRING_APPLICATION_NAME: discovery-service
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9099/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
      discovery-service:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  noti-db:
    image: postgres:14
    container_name: noti-db
    environment:
      POSTGRES_DB: notification
      POSTGRES_USER: notification
      POSTGRES_PASSWORD: 1234
    ports:
      - "5433:5432"
    volumes:
      - noti_pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  notification-service:
    build:
      context: ./notification-service
    container_name: notification-service
    depends_on:
      kafka:
        condition: service_started
      noti-db:
        condition: service_started
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://noti-db:5432/notification
      SPRING_DATASOURCE_USERNAME: notification
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: nghialncse170125@fpt.edu.vn
      SPRING_MAIL_PASSWORD: ofhkqiwasdkbzpiw
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: "true"
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      SPRING_CLOUD_FAIL_FAST: "false"
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  user-db:
    image: postgres:14
    container_name: user-db
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: userdb
      POSTGRES_PASSWORD: 12345
    ports:
      - "5432:5432"
    volumes:
      - user_pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  consultant-db:
    image: postgres:14
    container_name: consultant-db
    environment:
      POSTGRES_DB: consultant
      POSTGRES_USER: consultant
      POSTGRES_PASSWORD: 12345
    ports:
      - "5434:5432"
    volumes:
      - consultant_pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    depends_on:
      kafka:
        condition: service_started
      user-db:
        condition: service_started
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/userdb
      SPRING_DATASOURCE_USERNAME: userdb
      SPRING_DATASOURCE_PASSWORD: 12345
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  candidate-db:
    image: postgres:14
    container_name: candidate-db
    environment:
      POSTGRES_DB: candidate
      POSTGRES_USER: candidate
      POSTGRES_PASSWORD: 12345
    ports:
      - "5436:5432"
    volumes:
      - candidate_pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  candidate-service:
    build:
      context: ./candidate-service
    container_name: candidate-service
    depends_on:
      kafka:
        condition: service_started
      user-db:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "8086:8086"
    environment:
      SPRING_REDIS_TIMEOUT: 5000
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATASOURCE_URL: jdbc:postgresql://candidate-db:5432/candidate
      SPRING_DATASOURCE_USERNAME: candidate
      SPRING_DATASOURCE_PASSWORD: 12345
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  program-db:
    image: postgres:14
    container_name: program-db
    environment:
      POSTGRES_DB: program
      POSTGRES_USER: program
      POSTGRES_PASSWORD: 12345
    ports:
      - "5435:5432"
    volumes:
      - program_pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  program-service:
    build:
      context: ./program-service
    container_name: program-service
    depends_on:
      kafka:
        condition: service_started
      user-db:
        condition: service_started
    ports:
      - "8087:8087"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://program-db:5432/program
      SPRING_DATASOURCE_USERNAME: program
      SPRING_DATASOURCE_PASSWORD: 12345
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  authentication-service:
    build:
      context: ./authentication-service
    container_name: authentication-service
    depends_on:
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      config-service:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      SPRING_REDIS_TIMEOUT: 5000
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  api-gateway-service:
    build:
      context: ./api-gateway-service
    container_name: api-gateway-service
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: true
      EUREKA_CLIENT_FETCH_REGISTRY: true
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED: true
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID: true
      SPRING_CLOUD_GATEWAY_HTTPCLIENT_CONNECT_TIMEOUT: 5000
      SPRING_CLOUD_GATEWAY_HTTPCLIENT_RESPONSE_TIMEOUT: 5s
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY: DEBUG
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  consultant-service:
    build:
      context: ./consultant-service
    container_name: consultant-service
    depends_on:
      kafka:
        condition: service_started
      user-db:
        condition: service_started
    ports:
      - "8085:8085"
    environment:
      SPRING_REDIS_TIMEOUT: 5000
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATASOURCE_URL: jdbc:postgresql://consultant-db:5432/consultant
      SPRING_DATASOURCE_USERNAME: consultant
      SPRING_DATASOURCE_PASSWORD: 12345
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  blog-db:
    image: postgres:14
    container_name: blog-db
    environment:
      POSTGRES_DB: blog
      POSTGRES_USER: blog
      POSTGRES_PASSWORD: 12345
    ports:
      - "5437:5432"
    volumes:
      - blog_pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  blog-service:
    build:
      context: ./blog-service
    container_name: blog-service
    depends_on:
      kafka:
        condition: service_started
      blog-db:
        condition: service_started
    ports:
      - "8089:8089"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://blog-db:5432/blog
      SPRING_DATASOURCE_USERNAME: blog
      SPRING_DATASOURCE_PASSWORD: 12345
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network

  websocket-service:
    build:
      context: ./websocket-service
    container_name: websocket-service
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "9001:9001"
    environment:
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    networks:
      - app-network

  report-db:
    image: postgres:14
    container_name: report-db
    environment:
      POSTGRES_DB: report
      POSTGRES_USER: report
      POSTGRES_PASSWORD: 12345
    ports:
      - "5455:5432"
    volumes:
      - report_pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  report-service:
    build:
      context: ./report-service
    container_name: report-service
    depends_on:
      kafka:
        condition: service_started
      report-db:
        condition: service_started
    ports:
      - "8090:8090"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://report-db:5432/report
      SPRING_DATASOURCE_USERNAME: report
      SPRING_DATASOURCE_PASSWORD: 12345
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CONFIG_IMPORT: http://config-service:8088/
      SPRING_CLOUD_FAIL_FAST: "false"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:9099/eureka/
      TZ: Asia/Ho_Chi_Minh
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    networks:
      - app-network

#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#
#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    ports:
#      - "3000:3000"


volumes:
  noti_pgdata:
  user_pgdata:
  program_pgdata:
  candidate_pgdata:
  consultant_pgdata:
  blog_pgdata:
  report_pgdata:

networks:
  app-network:
    driver: bridge
